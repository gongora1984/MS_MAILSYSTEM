// <auto-generated />
using System;
using MAILSYSTEM.INFRASTRUCTURE;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MAILSYSTEM.INFRASTRUCTURE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230310213433_UpdateTablesAndFields")]
    partial class UpdateTablesAndFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MAILSYSTEM.DOMAIN.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CompanyAddress1")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CompanyAddress2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CompanyBillingAddress1")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CompanyBillingAddress2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CompanyBillingCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("CompanyBillingState")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyBillingZip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("CompanyCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyDefaultFilePathLocation")
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)");

                    b.Property<string>("CompanyEmail")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CompanyFax")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyPassword")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CompanyPhone")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("CompanyReturnAddress1")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CompanyReturnAddress2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CompanyReturnCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyReturnEmailAddress")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CompanyReturnName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<Guid?>("CompanyReturnState")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyReturnZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("CompanyState")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyUsername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyZip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("CompanyZip");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKCompany");

                    b.HasIndex(new[] { "CompanyBillingState" }, "FKStateCompanyBillingState");

                    b.HasIndex(new[] { "CompanyReturnState" }, "FKStateCompanyReturnState");

                    b.HasIndex(new[] { "CompanyState" }, "FKStateCompanyState");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("MAILSYSTEM.DOMAIN.Entities.CompanyLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CompanyAccessToken")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CompanyAccessTokenValidTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompanyLastAccess")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKCompanyLogin");

                    b.HasIndex(new[] { "CompanyId" }, "FKCompanyCompanyLogin");

                    b.ToTable("CompanyLogin", (string)null);
                });

            modelBuilder.Entity("MAILSYSTEM.DOMAIN.Entities.ListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ListItemDisplayText")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<bool?>("ListItemEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("ListItemOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SystemCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SystemTag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PKListItem");

                    b.ToTable("ListItem", (string)null);
                });

            modelBuilder.Entity("MAILSYSTEM.DOMAIN.Entities.MailJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Copies")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomData1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CustomData2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CustomData3")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DocumentNameOnly")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)");

                    b.Property<Guid>("EnvelopTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EnvelopeCaption1")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("EnvelopeCaption2")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("KeyNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PrintedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyAddress1")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PropertyAddress2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PropertyCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("PropertyState")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PropertyZip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("ReceivedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SendOutOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TotalPostage")
                        .HasColumnType("decimal(16, 2)");

                    b.Property<DateTime?>("VerifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Voided")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PKMailJob");

                    b.HasIndex(new[] { "CompanyId" }, "FKCompanyMailJob");

                    b.HasIndex(new[] { "EnvelopTypeId" }, "FKMailJobListItemEnvelopType");

                    b.HasIndex(new[] { "PropertyState" }, "FKStatePropertyState");

                    b.ToTable("MailJob", (string)null);
                });

            modelBuilder.Entity("MAILSYSTEM.DOMAIN.Entities.MailJobDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ChangedRecipientAddress1")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ChangedRecipientAddress2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ChangedRecipientCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ChangedRecipientName")
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)");

                    b.Property<Guid?>("ChangedRecipientState")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChangedRecipientZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("CorrectedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MailJobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotSentNote")
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)");

                    b.Property<decimal?>("PostageAmount")
                        .HasColumnType("decimal(16, 3)");

                    b.Property<DateTime?>("PrintedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReceivedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RecipientAddress1")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RecipientAddress2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RecipientCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)");

                    b.Property<Guid>("RecipientState")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecipientZip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("ReturnedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SentOutOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("VerifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Voided")
                        .HasColumnType("bit");

                    b.Property<bool>("WasCorrected")
                        .HasColumnType("bit");

                    b.Property<bool>("WasReturned")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PKMailJobDetail");

                    b.HasIndex(new[] { "MailJobId" }, "FKMailJobMailJobDetail");

                    b.HasIndex(new[] { "ChangedRecipientState" }, "FKStateMailJobDetailChangedRecipientState");

                    b.HasIndex(new[] { "RecipientState" }, "FKStateMailJobDetailRecipientState");

                    b.ToTable("MailJobDetail", (string)null);
                });

            modelBuilder.Entity("MAILSYSTEM.DOMAIN.Entities.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("StateAbbreviation")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("StateDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PKState");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("MAILSYSTEM.DOMAIN.Entities.Company", b =>
                {
                    b.HasOne("MAILSYSTEM.DOMAIN.Entities.State", "CompanyBillingStateNavigation")
                        .WithMany("CompanyBillingStateNavigations")
                        .HasForeignKey("CompanyBillingState")
                        .IsRequired()
                        .HasConstraintName("FKStateCompanyBillingState");

                    b.HasOne("MAILSYSTEM.DOMAIN.Entities.State", "CompanyReturnStateNavigation")
                        .WithMany("CompanyReturnStateNavigations")
                        .HasForeignKey("CompanyReturnState")
                        .HasConstraintName("FKStateCompanyReturnState");

                    b.HasOne("MAILSYSTEM.DOMAIN.Entities.State", "CompanyStateNavigation")
                        .WithMany("CompanyStateNavigations")
                        .HasForeignKey("CompanyState")
                        .IsRequired()
                        .HasConstraintName("FKStateCompanyState");

                    b.Navigation("CompanyBillingStateNavigation");

                    b.Navigation("CompanyReturnStateNavigation");

                    b.Navigation("CompanyStateNavigation");
                });

            modelBuilder.Entity("MAILSYSTEM.DOMAIN.Entities.CompanyLogin", b =>
                {
                    b.HasOne("MAILSYSTEM.DOMAIN.Entities.Company", "Company")
                        .WithMany("CompanyLogins")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FKCompanyCompanyLogin");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MAILSYSTEM.DOMAIN.Entities.MailJob", b =>
                {
                    b.HasOne("MAILSYSTEM.DOMAIN.Entities.Company", "Company")
                        .WithMany("MailJobs")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FKCompanyMailJob");

                    b.HasOne("MAILSYSTEM.DOMAIN.Entities.ListItem", "EnvelopType")
                        .WithMany("MailJobs")
                        .HasForeignKey("EnvelopTypeId")
                        .IsRequired()
                        .HasConstraintName("FKMailJobListItemEnvelopType");

                    b.HasOne("MAILSYSTEM.DOMAIN.Entities.State", "MailJobPropertyStateNavigation")
                        .WithMany("MailJobs")
                        .HasForeignKey("PropertyState")
                        .IsRequired()
                        .HasConstraintName("FKStateMailJobPropertyState");

                    b.Navigation("Company");

                    b.Navigation("EnvelopType");

                    b.Navigation("MailJobPropertyStateNavigation");
                });

            modelBuilder.Entity("MAILSYSTEM.DOMAIN.Entities.MailJobDetail", b =>
                {
                    b.HasOne("MAILSYSTEM.DOMAIN.Entities.State", "ChangedRecipientStateNavigation")
                        .WithMany("ChangedRecipientStateNavigations")
                        .HasForeignKey("ChangedRecipientState")
                        .HasConstraintName("FKStateMailJobDetailChangedRecipientState");

                    b.HasOne("MAILSYSTEM.DOMAIN.Entities.MailJob", "MailJob")
                        .WithMany("MailJobDetails")
                        .HasForeignKey("MailJobId")
                        .IsRequired()
                        .HasConstraintName("FKMailJobMailJobDetail");

                    b.HasOne("MAILSYSTEM.DOMAIN.Entities.State", "RecipientStateNavigation")
                        .WithMany("RecipientStateNavigations")
                        .HasForeignKey("RecipientState")
                        .IsRequired()
                        .HasConstraintName("FKStateMailJobDetailRecipientState");

                    b.Navigation("ChangedRecipientStateNavigation");

                    b.Navigation("MailJob");

                    b.Navigation("RecipientStateNavigation");
                });

            modelBuilder.Entity("MAILSYSTEM.DOMAIN.Entities.Company", b =>
                {
                    b.Navigation("CompanyLogins");

                    b.Navigation("MailJobs");
                });

            modelBuilder.Entity("MAILSYSTEM.DOMAIN.Entities.ListItem", b =>
                {
                    b.Navigation("MailJobs");
                });

            modelBuilder.Entity("MAILSYSTEM.DOMAIN.Entities.MailJob", b =>
                {
                    b.Navigation("MailJobDetails");
                });

            modelBuilder.Entity("MAILSYSTEM.DOMAIN.Entities.State", b =>
                {
                    b.Navigation("ChangedRecipientStateNavigations");

                    b.Navigation("CompanyBillingStateNavigations");

                    b.Navigation("CompanyReturnStateNavigations");

                    b.Navigation("CompanyStateNavigations");

                    b.Navigation("MailJobs");

                    b.Navigation("RecipientStateNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
